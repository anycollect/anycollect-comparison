extensions:
- !load
  extension: SelfDiscovery
  instance: self
- !load
  extension: MeterRegistry
  instance: registry
  config:
    globalPrefix: "anycollect"
    commonMeta:
      source: internal
- !load
  extension: PullEngine
  instance: puller
  dependencies:
    registry: !ref registry
  config:
    updatePeriod: 10 # expired timeout
    pullPeriod: 10
    defaultPoolSize: 1
    rules:
    - targetId: "cassandra-.*"
      poolSize: 2
    - targetId: "jmxtrans-.*"
      poolSize: 1
    - targetId: "stub-.*"
      poolSize: 2
    healthChecks:
      period: 20
      timeout: 5
      checks: []
#      - targetId: "stub-.*"
#        service: stub
#        period: 5
#        timeout: 3
- !load
  extension: Measurers
  instance: measurers
  config:
    families:
    - name: uptime
      measurements:
      - { id: value, path: Uptime, type: timestamp, stat: value }
    - name: cassandra-histogram
      measurements:
      - { id: min, path: Min, type: gauge, stat: min }
      - { id: max, path: Max, type: gauge, stat: max }
      - { id: mean, path: Mean, type: gauge, stat: mean }
      - { id: std, path: StdDev, type: gauge, stat: std }
      - { id: max_75, path: 75thPercentile, type: gauge, stat: max_75 }
      - { id: max_90, path: 90thPercentile, type: gauge, stat: max_90 }
      - { id: max_95, path: 95thPercentile, type: gauge, stat: max_95 }
      - { id: max_99, path: 99thPercentile, type: gauge, stat: max_99 }
    - name: cassandra-timer
      measurements:
      - { id: min, path: Min, type: gauge, stat: min, unitOf: DurationUnit }
      - { id: max, path: Max, type: gauge, stat: max, unitOf: DurationUnit }
      - { id: mean, path: Mean, type: gauge, stat: mean, unitOf: DurationUnit }
      - { id: std, path: StdDev, type: gauge, stat: std, unitOf: DurationUnit }
      - { id: max_50, path: 50thPercentile, type: gauge, stat: max_50, unitOf: DurationUnit }
      - { id: max_75, path: 75thPercentile, type: gauge, stat: max_75, unitOf: DurationUnit }
      - { id: max_95, path: 95thPercentile, type: gauge, stat: max_95, unitOf: DurationUnit }
      - { id: max_98, path: 98thPercentile, type: gauge, stat: max_98, unitOf: DurationUnit }
      - { id: max_99, path: 99thPercentile, type: gauge, stat: max_99, unitOf: DurationUnit }
      - { id: max_999, path: 999thPercentile, type: gauge, stat: max_999, unitOf: DurationUnit }
    - name: sample-histogram
      measurements:
      - { id: min, path: Min, type: gauge, stat: min }
      - { id: max, path: Max, type: gauge, stat: max }
      - { id: mean, path: Mean, type: gauge, stat: mean }
      - { id: std, path: StdDev, type: gauge, stat: std }
      - { id: max_50, path: 50thPercentile, type: gauge, stat: max_50 }
      - { id: max_75, path: 75thPercentile, type: gauge, stat: max_75 }
      - { id: max_90, path: 90thPercentile, type: gauge, stat: max_90 }
      - { id: max_95, path: 95thPercentile, type: gauge, stat: max_95 }
      - { id: max_99, path: 99thPercentile, type: gauge, stat: max_99 }
      - { id: max_999, path: 999thPercentile, type: gauge, stat: max_999 }
    - name: sample-gauge
      measurements:
      - { id: value1, path: LongValue, type: gauge, stat: value }
      - { id: value2, path: DoubleValue, type: gauge, stat: value }
    - name: sample-counter
      measurements:
      - { id: count1, path: LongCount, type: counter, stat: value }
      - { id: count2, path: DoubleCount, type: counter, stat: value }
- !load
  extension: ConsulKv
  instance: consulKv
  config:
    host: !var CONSUL_HOST
    port: !var CONSUL_PORT
- !load
  extension: KvJavaAppDiscovery
  instance: consulJavaDiscovery
  config:
    key: "anycollect/jmx/"
  dependencies:
    kv: !ref consulKv
- !load
  extension: StaticJmxQueryProvider
  instance: jvmMetrics
  config:
    queries:
    - "@class": .JvmMemory
    - "@class": .JvmThreads
    - queryId: jvm.runtime.uptime
      mbean: "java.lang:type=Runtime"
      families:
      - what: jvm.runtime.uptime
        name: uptime
        baseUnit: ms
- !load
  extension: StaticJmxQueryProvider
  instance: stubQueries
  config:
    queries:
    - queryId: stub.histogram0
      mbean: "test:name=SampleHistogram0,k2=*,k1=*"
      families:
      - what: stub.histogram0
        name: sample-histogram
        tagKeys: [k1, k2]
    - queryId: stub.histogram1
      mbean: "test:name=SampleHistogram1,k2=*,k1=*"
      families:
      - what: stub.histogram1
        name: sample-histogram
        tagKeys: [k1, k2]
    - queryId: stub.histogram2
      mbean: "test:name=SampleHistogram2,k2=*,k1=*"
      families:
      - what: stub.histogram2
        name: sample-histogram
        tagKeys: [k1, k2]
    - queryId: stub.histogram3
      mbean: "test:name=SampleHistogram3,k2=*,k1=*"
      families:
      - what: stub.histogram3
        name: sample-histogram
        tagKeys: [k1, k2]
    - queryId: stub.histogram4
      mbean: "test:name=SampleHistogram4,k2=*,k1=*"
      families:
      - what: stub.histogram4
        name: sample-histogram
        tagKeys: [k1, k2]
    - queryId: stub.histogram5
      mbean: "test:name=SampleHistogram5,k2=*,k1=*"
      families:
      - what: stub.histogram5
        name: sample-histogram
        tagKeys: [k1, k2]
    - queryId: stub.histogram6
      mbean: "test:name=SampleHistogram6,k2=*,k1=*"
      families:
      - what: stub.histogram6
        name: sample-histogram
        tagKeys: [k1, k2]
    - queryId: stub.histogram7
      mbean: "test:name=SampleHistogram7,k2=*,k1=*"
      families:
      - what: stub.histogram7
        name: sample-histogram
        tagKeys: [k1, k2]
    - queryId: stub.histogram8
      mbean: "test:name=SampleHistogram8,k2=*,k1=*"
      families:
      - what: stub.histogram8
        name: sample-histogram
        tagKeys: [k1, k2]
    - queryId: stub.histogram9
      mbean: "test:name=SampleHistogram9,k2=*,k1=*"
      families:
      - what: stub.histogram9
        name: sample-histogram
        tagKeys: [k1, k2]
- !load
  extension: CurrentApp
  instance: jvm
  config:
    name: anycollect
- !load
  extension: StaticQueryMatcherResolver # JobFactory, or maybe move to PullEngine?
  instance: matcher
  config:
    rules:
    - instanceId: ".*"
      queryId: "jvm.*"
      period: 10
    - instanceId: "cassandra-.*"
      queryId: "cassandra.*"
      period: 5
    - instanceId: "stub-.*"
      queryId: "stub.*"
      period: 10
- !load
  extension: MeterRegistryReader
  instance: selfReader
  dependencies:
    puller: !ref puller
    registry: !ref registry
    self: !ref self
- !load
  extension: JmxReader
  instance: jmx
  dependencies:
    puller: !ref puller
    discovery: !refs
    - jvm
    - consulJavaDiscovery
    queries: !refs
    - jvmMetrics
    - stubQueries
    matcher: !ref matcher
- !load
  extension: Slf4jWriter
  instance: slf4j
- !load
  extension: TagGraphiteSerializer
  instance: graphiteSerializer
- !load
  extension: SocketWriter
  instance: graphite
  dependencies:
    format: !ref graphiteSerializer
  config:
    host: !var GRAPHITE_HOST
    port: !var GRAPHITE_PORT
    protocol: TCP
- !load
  extension: SocketWriter
  instance: blackhole
  dependencies:
    format: !ref graphiteSerializer
  config:
    host: !var BLACKHOLE_HOST
    port: !var BLACKHOLE_PORT
    protocol: TCP
- !load
  extension: Router
  instance: router
  dependencies:
    readers: !refs
    - selfReader
    - jmx
    processors: []
    writers: !refs
    - slf4j
    - graphite
    - blackhole
  config:
    topology:
    - from: selfReader
      to: slf4j
    - from: selfReader
      to: graphite
    - from: jmx
      to: graphite
      filters:
      - type: acceptKey
        startsWith: "anycollect"
      - type: acceptKey
        startsWith: "jvm"
      - type: acceptKey
        startsWith: "instances"
      - type: deny
    - from: jmx
      to: blackhole
      filters:
      - type: accept
